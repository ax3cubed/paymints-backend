use anchor_lang::prelude::*;
use anchor_spl::token::{self, Mint, Token, TokenAccount, Transfer};

declare_id!("6xuk64bUc67VofMg8NopsoeZirKjze2uk3ZrC56QLi8v");

#[program]
pub mod payroll {
    use super::*;

    pub fn create_vesting_account(
        ctx: Context<CreateVestingAccount>,
        amount: u64,
        is_vesting: bool,
        vest_until: i64, // timestamp
    ) -> Result<()> {
        // Validate inputs
        require!(amount > 0, ErrorCode::InvalidAmount);
        if is_vesting {
            require!(vest_until > Clock::get()?.unix_timestamp, ErrorCode::InvalidVestingPeriod);
        }

        let vesting_account = &mut ctx.accounts.vesting_account;
        vesting_account.employer = ctx.accounts.employer.key();
        vesting_account.employee = ctx.accounts.employee.key();
        vesting_account.mint = ctx.accounts.mint.key();
        vesting_account.amount = amount;
        vesting_account.is_vesting = is_vesting;
        vesting_account.vest_until = vest_until;
        vesting_account.claimed = false;

        // Transfer tokens
        let cpi_accounts = Transfer {
            from: ctx.accounts.employer_token_account.to_account_info(),
            to: if is_vesting {
                ctx.accounts.vault_token_account.to_account_info()
            } else {
                ctx.accounts.employee_token_account.to_account_info()
            },
            authority: ctx.accounts.employer.to_account_info(),
        };
        let cpi_program = ctx.accounts.token_program.to_account_info();
        let cpi_ctx = CpiContext::new(cpi_program, cpi_accounts);
        token::transfer(cpi_ctx, amount)?;

        if !is_vesting {
            vesting_account.claimed = true;
        }

        Ok(())
    }

    pub fn claim_vested_tokens(ctx: Context<ClaimVestedTokens>) -> Result<()> {
        let vesting_account = &mut ctx.accounts.vesting_account;

        // Validate claim conditions
        require!(vesting_account.is_vesting, ErrorCode::NotAVestedAccount);
        require!(!vesting_account.claimed, ErrorCode::AlreadyClaimed);
        require!(
            Clock::get()?.unix_timestamp >= vesting_account.vest_until,
            ErrorCode::VestingPeriodNotReached
        );

        // Bind vesting_account key to extend lifetime
        let vesting_key = vesting_account.key();
        let seeds = &[
            b"vault",
            vesting_key.as_ref(),
            &[ctx.bumps.vault_token_account],
        ];
        let signer_seeds = &[&seeds[..]];

        let cpi_accounts = Transfer {
            from: ctx.accounts.vault_token_account.to_account_info(),
            to: ctx.accounts.employee_token_account.to_account_info(),
            authority: ctx.accounts.vault_authority.to_account_info(),
        };
        let cpi_program = ctx.accounts.token_program.to_account_info();
        let cpi_ctx = CpiContext::new_with_signer(cpi_program, cpi_accounts, signer_seeds);
        token::transfer(cpi_ctx, vesting_account.amount)?;

        vesting_account.claimed = true;
        Ok(())
    }
}

#[derive(Accounts)]
#[instruction(amount: u64)]
pub struct CreateVestingAccount<'info> {
    #[account(mut)]
    pub employer: Signer<'info>,

    /// CHECK: Validated by token account ownership
    pub employee: AccountInfo<'info>,

    #[account(
        init,
        payer = employer,
        space = 8 + VestingAccount::LEN,
        seeds = [b"vesting", employer.key().as_ref(), employee.key().as_ref()],
        bump
    )]
    pub vesting_account: Account<'info, VestingAccount>,

    #[account(
        mut,
        constraint = employer_token_account.owner == employer.key() @ ErrorCode::InvalidTokenAccount,
        constraint = employer_token_account.mint == mint.key() @ ErrorCode::InvalidMint
    )]
    pub employer_token_account: Account<'info, TokenAccount>,

    #[account(
        init_if_needed,
        payer = employer,
        seeds = [b"vault", vesting_account.key().as_ref()],
        bump,
        token::mint = mint,
        token::authority = vault_authority
    )]
    pub vault_token_account: Account<'info, TokenAccount>,

    /// CHECK: PDA authority
    #[account(
        seeds = [b"vault", vesting_account.key().as_ref()],
        bump
    )]
    pub vault_authority: AccountInfo<'info>,

    #[account(
        mut,
        constraint = employee_token_account.owner == employee.key() @ ErrorCode::InvalidTokenAccount,
        constraint = employee_token_account.mint == mint.key() @ ErrorCode::InvalidMint
    )]
    pub employee_token_account: Account<'info, TokenAccount>,

    pub mint: Account<'info, Mint>,

    pub token_program: Program<'info, Token>,
    pub system_program: Program<'info, System>,
    pub rent: Sysvar<'info, Rent>,
    pub associated_token_program: Program<'info, anchor_spl::associated_token::AssociatedToken>,
}

#[derive(Accounts)]
pub struct ClaimVestedTokens<'info> {
    #[account(
        mut,
        has_one = employee @ ErrorCode::InvalidEmployee,
        has_one = mint @ ErrorCode::InvalidMint
    )]
    pub vesting_account: Account<'info, VestingAccount>,

    #[account(
        mut,
        seeds = [b"vault", vesting_account.key().as_ref()],
        bump,
        constraint = vault_token_account.mint == vesting_account.mint @ ErrorCode::InvalidMint
    )]
    pub vault_token_account: Account<'info, TokenAccount>,

    /// CHECK: PDA authority
    #[account(
        seeds = [b"vault", vesting_account.key().as_ref()],
        bump
    )]
    pub vault_authority: AccountInfo<'info>,

    #[account(
        mut,
        constraint = employee_token_account.owner == employee.key() @ ErrorCode::InvalidTokenAccount,
        constraint = employee_token_account.mint == vesting_account.mint @ ErrorCode::InvalidMint
    )]
    pub employee_token_account: Account<'info, TokenAccount>,

    #[account(mut, address = vesting_account.employee @ ErrorCode::InvalidEmployee)]
    pub employee: Signer<'info>,

    pub mint: Account<'info, Mint>,
    pub token_program: Program<'info, Token>,
}

#[account]
pub struct VestingAccount {
    pub employer: Pubkey,
    pub employee: Pubkey,
    pub mint: Pubkey,
    pub amount: u64,
    pub is_vesting: bool,
    pub vest_until: i64,
    pub claimed: bool,
}

impl VestingAccount {
    pub const LEN: usize = 32 + 32 + 32 + 8 + 1 + 8 + 1; // Updated to include mint
}

#[error_code]
pub enum ErrorCode {
    #[msg("Tokens have already been claimed")]
    AlreadyClaimed,
    #[msg("Not a vested token account")]
    NotAVestedAccount,
    #[msg("Vesting period not yet reached")]
    VestingPeriodNotReached,
    #[msg("Invalid token amount")]
    InvalidAmount,
    #[msg("Invalid vesting period")]
    InvalidVestingPeriod,
    #[msg("Invalid token account")]
    InvalidTokenAccount,
    #[msg("Invalid mint")]
    InvalidMint,
    #[msg("Invalid employee")]
    InvalidEmployee,
}